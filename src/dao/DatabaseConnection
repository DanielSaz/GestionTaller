package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    // Datos de conexión a la base de datos
    private static final String URL = "jdbc:mysql://localhost:3306/GestionTaller";
    private static final String USUARIO = "user";
    private static final String CONTRASENA = "user";
    
    // Instancia única (patrón Singleton)
    private static Connection conexion;
    
    // Bloque estático para registrar el driver
    static {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.err.println("Error al cargar el driver JDBC: " + e.getMessage());
            throw new ExceptionInInitializerError(e);
        }
    }

    // Método para obtener la conexión (Singleton)
    public static Connection getConnection() throws SQLException {
        if (conexion == null || conexion.isClosed()) {
            conexion = DriverManager.getConnection(URL, USUARIO, CONTRASENA);
            // Configurar para que las transacciones no se autocommiten
            conexion.setAutoCommit(false);
        }
        return conexion;
    }

    // Método para cerrar la conexión
    public static void closeConnection() {
        if (conexion != null) {
            try {
                // Hacer commit de cualquier transacción pendiente antes de cerrar
                if (!conexion.getAutoCommit()) {
                    conexion.commit();
                }
                conexion.close();
            } catch (SQLException e) {
                System.err.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }
    }

    // Método para hacer rollback en caso de error
    public static void rollback() {
        if (conexion != null) {
            try {
                conexion.rollback();
            } catch (SQLException e) {
                System.err.println("Error al hacer rollback: " + e.getMessage());
            }
        }
    }

    // Método para probar la conexión
    public static boolean testConnection() {
        try (Connection conn = getConnection()) {
            return conn.isValid(2); // 2 segundos de timeout
        } catch (SQLException e) {
            System.err.println("Error al probar la conexión: " + e.getMessage());
            return false;
        }
    }
}
 